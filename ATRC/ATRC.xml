<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ATRC</name>
    </assembly>
    <members>
        <member name="T:ATRC.Filehandler">
            <summary>
            ATRC Filehandler, contains everything
            </summary>
        </member>
        <member name="T:ATRC.Filehandler.ATRCVariable">
            <summary>
            ATRCFileData struct
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCVariable.Name">
            <summary>
            Variable name
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCVariable.Value">
            <summary>
            Variable value
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCVariable.ArrayValues">
            <summary>
            Variable value if array
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCVariable.IsArray">
            <summary>
            Is the variable an array
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCVariable.IsPrivate">
            <summary>
            Is the variable private
            Used only when reading in ATRCFileData class
            </summary>
        </member>
        <member name="M:ATRC.Filehandler.ATRCVariable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:ATRC.Filehandler.ATRCKey">
            <summary>
            ATRCKey struct
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCKey.Name">
            <summary>
            Key name
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCKey.Value">
            <summary>
            Key value
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCKey.ArrayValues">
            <summary>
            Key value if array
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCKey.IsArray">
            <summary>
            Is the key an array
            </summary>
        </member>
        <member name="T:ATRC.Filehandler.ATRCBlock">
            <summary>
            ATRCBlock struct
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCBlock.Name">
            <summary>
            Block name
            </summary>
        </member>
        <member name="F:ATRC.Filehandler.ATRCBlock.Keys">
            <summary>
            Block keys
            </summary>
        </member>
        <member name="T:ATRC.Filehandler.ATRCFileData">
            <summary>
            Filedata class. Contains all the data from the file
            </summary>
        </member>
        <member name="P:ATRC.Filehandler.ATRCFileData.Filename">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:ATRC.Filehandler.ATRCFileData.Variables">
            <summary>
            Variables
            </summary>
        </member>
        <member name="P:ATRC.Filehandler.ATRCFileData.Blocks">
            <summary>
            Blocks
            </summary>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.AddBlock(System.String)">
            <summary>
            Create a new block, will be appended to the end of the file
            </summary>
            <param name="block">block to be added</param>
            <exception cref="T:System.IO.IOException">block already exists</exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.RemoveBlock(System.String)">
            <summary>
            Removes the given block from the file
            </summary>
            <param name="block">block to be removed</param>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.BlockExists(System.String)">
            <summary>
            Checks if block exists
            </summary>
            <param name="block">Block to search</param>
            <returns>True if exists</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ReadVariables">
            <summary>
            Reads all variables from the file, public and private
            </summary>
            <returns>ATRCVariable[]</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.AddVariable(System.String,System.Object)">
            <summary>
            Add a variable to the file
            </summary>
            <param name="name">Variable name</param>
            <param name="value">Variable value</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.A_ReadVariable(System.String)">
            <summary>
            Read array variable
            </summary>
            <param name="name">Variable name</param>
            <returns>string[]</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.S_ReadVariable(System.String)">
            <summary>
            Read string variable
            </summary>
            <param name="name">Variable name</param>
            <returns>string</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ModifyVariable(System.String,System.Object)">
            <summary>
            Modifies the given variable with the given value
            </summary>
            <param name="name">Variable name</param>
            <param name="value">New value, string or string[]</param>
            <exception cref="T:System.IO.IOException">Will throw exception if variable does not exist, or is private</exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.RemoveVariable(System.String)">
            <summary>
            Removes the given variable from the file
            </summary>
            <param name="name">Variable to be removed</param>
            <exception cref="T:System.IO.IOException">Will throw exception if variable does not exist, or is private</exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.VariableExists(System.String)">
            <summary>
            Checks if variable exists
            </summary>
            <param name="name">Variable name</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.IsPrivateVariable(System.String)">
            <summary>
            Checks if variable is private if it exists
            </summary>
            <param name="name"></param>
            <returns>False if it doesn't exist, or true/false if it is private or public</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.CheckVariableType(System.String)">
            <summary>
            Check if variable is array or not
            </summary>
            <param name="name">Name to be searched for</param>
            <returns>True if variable is array</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.AddKey(System.String,System.String,System.Object)">
            <summary>
            Adds a key to the given block
            </summary>
            <param name="block">Block where the key will be added</param>
            <param name="key">Key name that will be added</param>
            <param name="value">String or string array. </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.A_ReadKey(System.String,System.String)">
            <summary>
            Reads the given key from the given block
            </summary>
            <param name="block">From what block to search</param>
            <param name="key">Key name</param>
            <returns>string[]</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.S_ReadKey(System.String,System.String)">
            <summary>
            Reads the given key from the given block
            </summary>
            <param name="block">From what block to search</param>
            <param name="key">Key name</param>
            <returns>string</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ModifyKey(System.String,System.String,System.Object)">
            <summary>
            Modifies the given key with the given value
            </summary>
            <param name="block">Block where the key is</param>
            <param name="key">key name</param>
            <param name="value">New key value</param>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.RemoveKey(System.String,System.String)">
            <summary>
            Removes the given key from the given block
            </summary>
            <param name="block">Block where the key will be removed from</param>
            <param name="key">Key name</param>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.MoveKey(System.String,System.String,System.String)">
            <summary>
            Move key from src block to dst block
            </summary>
            <param name="fromBlock">source</param>
            <param name="toBlock">destination</param>
            <param name="key">key name</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.KeyExists(System.String,System.String)">
            <summary>
            Checks if key exists
            </summary>
            <param name="block">Key's block</param>
            <param name="key">Key's name</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.CheckKeyType(System.String,System.String)">
            <summary>
            Checks if key is array or not, returning true if it is
            </summary>
            <param name="block">block where to searcg</param>
            <param name="key">key to search</param>
            <returns>True if key is array type</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.S_KeyInsert(System.String,System.String,System.Object[])">
            <summary>
            Inserts the given inserts into the key value's %*% positions
            </summary>
            <param name="block"></param>
            <param name="key"></param>
            <param name="inserts"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException">Key doesn't exist, key is an array</exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ReplaceInserts(System.String,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Replace %*% insert with inser
            </summary>
            <param name="line">line with contents</param>
            <param name="inserts">object[] of all inserts</param>
            <param name="is_array">is the whole line from array</param>
            <param name="index">if from array, provide your own indexing</param>
            <returns>inserted line</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.SaveToFile(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Saves the given value to the file
            </summary>
            <param name="block">Can be null, if variable is given</param>
            <param name="name">Can be null, Variable or key name</param>
            <param name="value">Can be null, Variable or key value</param>
            <param name="action">
            0 = Add block
            1 = Remove block
            2 = Add variable
            4 = Modify variable
            5 = Remove variable
            6 = Add key
            8 = Modify key
            9 = Remove key
            10 = Move key
            </param>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ObjectToSTR(System.Object)">
            <summary>
            Turn object to string, with it being parsed to ATRC format
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ParseToATRC(System.String)">
            <summary>
            Parses the given string to ATRC format
            
            </summary>
            <param name="parse">String to be parsed</param>
            <returns>The parsed string</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ParseLine(System.String)">
            <summary>
            Parse line, return parsed line
            </summary>
            <param name="line">line</param>
            <returns></returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.CheckContain(System.String)">
            <summary>
            Checks if string contains reserved characters
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.CheckWhiteSpacing(System.String)">
            <summary>
            Removes whitespace from end and start of the string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ParseParseResult(System.String)">
            <summary>
            Parse _parse_result
            </summary>
            <param name="_parse_result"></param>
            <returns></returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.MyRegex">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;!\\\\),</code><br/>
            Explanation:<br/>
            <code>
            ○ Zero-width negative lookbehind.<br/>
                ○ Match '\\' right-to-left.<br/>
            ○ Match ','.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.MyRegex1">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;!\\\\),</code><br/>
            Explanation:<br/>
            <code>
            ○ Zero-width negative lookbehind.<br/>
                ○ Match '\\' right-to-left.<br/>
            ○ Match ','.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ParserValue(System.String,System.Int32)">
            <summary>
            Parse the value of a variable or key
            </summary>
            <param name="_line">Line containing value, non-trimmed</param>
            <param name="_line_number">Line number</param>
            <returns>Value, </returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.ParseFile(System.String)">
            <summary>
            Parse the contents of the file
            </summary>
            <param name="p_filename">File location/name</param>
            <returns>block data and variable data</returns>
        </member>
        <member name="M:ATRC.Filehandler.ATRCFileData.Read(System.String)">
            <summary>
            Open a file, set filepath first using Filename property
            </summary>
            <returns>
            ATRCFileData object
            </returns>
        </member>
        <member name="M:ATRC.Filehandler.ParseToBool(System.String)">
            <summary>
            Parse value to boolean
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ParseToInt(System.String)">
            <summary>
            Parse string to integer
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:ATRC.Filehandler.ParseToFloat(System.String)">
            <summary>
            Parse string to float
            </summary>
            <param name="value">String</param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MyRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MyRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MyRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
